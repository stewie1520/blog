// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: account.query.sql

package dao_account

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "accounts" ("id", "email", "password") VALUES ($1, $2, $3) RETURNING id, email, password, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.ID, arg.Email, arg.Password)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, email, password, created_at, updated_at, deleted_at FROM "accounts" WHERE "email" = $1 LIMIT 1
`

func (q *Queries) FindByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, findByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
